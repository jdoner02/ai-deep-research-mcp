name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  NODE_VERSION: '20'
  RUBY_VERSION: '3.1'

jobs:
  build:
    name: 🏗️ Build GitHub Pages Site
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web_interface/package-lock.json

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
          cache-version: 0
          working-directory: './docs'

      - name: ⚙️ Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: 🛠️ Build web interface
        run: |
          cd web_interface
          if [ -f package.json ]; then
            npm ci
            npm run build
            echo "✅ Web interface built successfully"
          else
            echo "⚠️ No web interface package.json found, skipping"
          fi

      - name: 🏗️ Build Jekyll site
        run: |
          cd docs
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 🔧 Post-build optimizations
        run: |
          cd docs/_site
          
          # Ensure web interface files are integrated
          if [ -d "../../web_interface/dist" ]; then
            cp -r ../../web_interface/dist/* . 2>/dev/null || echo "No dist files to copy"
          fi
          
          # Create .nojekyll to prevent GitHub from processing as Jekyll again
          touch .nojekyll
          
          # Verify critical files exist
          echo "📋 Site structure:"
          find . -name "*.html" -o -name "*.js" -o -name "*.css" | head -20
          
          # Check file sizes
          echo "📊 Asset sizes:"
          find . -name "*.js" -o -name "*.css" -exec du -h {} \; | head -10

      - name: 📤 Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs/_site

  deploy:
    name: 🌐 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🏥 Health check
        run: |
          echo "🔍 Performing health check..."
          sleep 30  # Wait for deployment to propagate
          
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          
          # Basic connectivity test
          if curl -s -f -o /dev/null "$SITE_URL"; then
            echo "✅ Site is accessible"
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
            echo "📊 Status Code: $STATUS_CODE"
          else
            echo "⚠️ Site not immediately accessible (may take a few minutes)"
          fi

      - name: 🎉 Deployment summary
        run: |
          echo "## 🚀 GitHub Pages Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Deployed:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 [Home Page](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- 📚 [Documentation](${{ steps.deployment.outputs.page_url }}docs/)" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 [Research Interface](${{ steps.deployment.outputs.page_url }}research/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status:** Deployment successful" >> $GITHUB_STEP_SUMMARY
