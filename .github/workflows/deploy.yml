name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy src --ignore-missing-imports
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        PYTHONPATH=. python -m pytest tests/ -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

  security:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency security check
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate API Documentation
      run: |
        python -c "
        import json
        from src.presentation.web_interface import WebInterfaceHandler
        handler = WebInterfaceHandler()
        docs = handler.get_api_documentation()
        
        # Create docs directory if it doesn't exist
        import os
        os.makedirs('docs/api', exist_ok=True)
        
        # Save API documentation
        with open('docs/api/openapi.json', 'w') as f:
            json.dump(docs, f, indent=2)
        
        print('✅ API documentation generated')
        "
    
    - name: Create production build info
      run: |
        echo "Build Date: $(date)" > docs/build-info.txt
        echo "Commit: ${{ github.sha }}" >> docs/build-info.txt
        echo "Branch: ${{ github.ref_name }}" >> docs/build-info.txt
        echo "Python Tests: Passed" >> docs/build-info.txt
        echo "Security Scan: Completed" >> docs/build-info.txt
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, build, deploy]
    if: always()
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🚀 Successfully deployed to GitHub Pages!"
          echo "📊 Test Results: ${{ needs.test.result }}"
          echo "🔒 Security Scan: ${{ needs.security.result }}"
          echo "🏗️ Build Status: ${{ needs.build.result }}"
          echo "🌐 Deployment: ${{ needs.deploy.result }}"
        else
          echo "❌ Deployment failed or skipped"
          echo "Check the logs above for details"
        fi
